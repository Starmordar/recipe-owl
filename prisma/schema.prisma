generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Ingredient {
  id       Int        @id @default(autoincrement())
  name     String
  unit     String?
  recipes  Recipe[]
  CartItem CartItem[]
}

model Recipe {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String

  steps       String[]
  ingredients Ingredient[]
  CartItem    CartItem[]
}

model Cart {
  id    Int        @id @default(autoincrement())
  items CartItem[]
}

model CartItem {
  id     Int  @id @default(autoincrement())
  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  recipeId     Int?
  ingredientId Int?

  recipe     Recipe?     @relation(fields: [recipeId], references: [id])
  ingredient Ingredient? @relation(fields: [ingredientId], references: [id])

  quantity Int @default(1)

  @@unique([cartId, recipeId, ingredientId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
