generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Recipe {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  source      String?
  cookTime    String?
  imageUrl    String

  steps          String[]
  ingredients    Ingredient[]
  savedRecipes   SavedRecipe[]
  cartItems      CartItem[]
  recipeOfTheDay RecipeOfTheDay[]

  createdById String
  user        User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id    Int    @id @default(autoincrement())
  name  String
  unit  String
  order Int    @default(1)

  recipeId  Int
  recipe    Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model Cart {
  id    Int        @id @default(autoincrement())
  items CartItem[]

  shareToken String? @unique

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  sharedCarts SharedCart[]

  @@index([userId])
}

model SharedCart {
  id Int @id @default(autoincrement())

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([cartId, userId])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  isChecked Boolean @default(false)

  cartId Int
  cart   Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  ingredientId Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([cartId, recipeId, ingredientId])
}

model SavedRecipe {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

model RecipeOfTheDay {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, createdAt])
}

model User {
  id       String    @id
  sessions Session[]

  fullName       String
  email          String  @unique
  picture        String?
  hashedPassword String?

  provider   String?
  providerId String?

  savedRecipes SavedRecipe[]
  recipes      Recipe[]
  Cart         Cart?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  SharedCart SharedCart[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
